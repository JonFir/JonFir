<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on JonFir</title>
    <link>https://jonfir.github.io/posts/</link>
    <description>Recent content in Posts on JonFir</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Jan 2022 17:48:17 +0700</lastBuildDate><atom:link href="https://jonfir.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Подборка материалов по swift concurrency (async/await)</title>
      <link>https://jonfir.github.io/posts/async-await-materials/</link>
      <pubDate>Fri, 07 Jan 2022 17:48:17 +0700</pubDate>
      
      <guid>https://jonfir.github.io/posts/async-await-materials/</guid>
      <description>В прошлом году apple представила разработчикам долгожданные async/await, а так же actor, AsyncSequence, и еще много чего. Все эти штуки получили название &amp;ldquo;swift concurrency&amp;rdquo;. И чтобы вам было проще разобраться с новыми технологиями я собрал полную подборку материалов по теме.
Самое основное [en] Официальная документация
[ru] Перевод официальной документации
[en] Ответы на часто задаваемые вопросы, с примерами
[en] Книга новичка
WWDC 2021 [en] Первое знакомство async/await
[en] Более подробный разбор async/await (structured concurrency)</description>
    </item>
    
    <item>
      <title>Полезный контент для iOS разработчика (Обновляется)</title>
      <link>https://jonfir.github.io/posts/ios-materials/</link>
      <pubDate>Sun, 27 Sep 2020 19:47:51 +0700</pubDate>
      
      <guid>https://jonfir.github.io/posts/ios-materials/</guid>
      <description>Книги [en] Programming iOS 13: Dive Deep into Views, View Controllers, and Frameworks amazon
[en][ru] Мэтт Гэлловей: Сила Objective-C 2.0. лабиринт/amazon
Блоги [en] Хардкорный блог о iOS
[en] objc.io
[en] swiftbysundell
[en] nshipster
[en] raywenderlich
[en] pspdfkit
[en] swiftui-lab
[en] hackingwithswift
Статьи [en] @State, @ObjectBinding and @EnvironmentObject in SwiftUI
[ru] Swift против Rust — бенчмаркинг на Linux
 Читать с комментариями. Особенно интересно тем, что в итоге был найден способ ускорить swift пример более чем в 10 раз</description>
    </item>
    
    <item>
      <title>Функциональный Swift — это просто</title>
      <link>https://jonfir.github.io/posts/easy-fp-swift/</link>
      <pubDate>Tue, 29 Oct 2019 14:41:24 +0700</pubDate>
      
      <guid>https://jonfir.github.io/posts/easy-fp-swift/</guid>
      <description>В статьях о функциональном программировании много пишут о том, как ФП подход улучшает разработку: код становится легко писать, читать, разбивать на потоки и тестировать, построить плохую архитектуру невозможно~~, а волосы становятся мягкими и шелковистыми~~.
Недостаток один — высокий порог входа. Пытаясь разобраться в ФП, я столкнулся с огромным количеством теории, функторами, монадами, теорией категорий и алгебраическими типами данных. А как применять ФП на практике, было неясно. Кроме того, примеры приводились на незнакомых мне языках — хаскеле и скале.</description>
    </item>
    
    <item>
      <title>Структура iOS проекта</title>
      <link>https://jonfir.github.io/posts/ios-project-structure/</link>
      <pubDate>Mon, 28 Oct 2019 12:40:40 +0700</pubDate>
      
      <guid>https://jonfir.github.io/posts/ios-project-structure/</guid>
      <description>Введение Привет. В этой статье поговорим о структуре папок в проекте. Это не популярная тема для статей, но правильная структура папок влияет на удобство навигации.
Часто проект делится на три части. Первая часть, UI, содержит элементы интерфейса, UIViewController’ы, презентеры, вьюмодели, интеракторы и иже с ними. Вторая часть бизнес логика. Которая заканчивается на взаимодействие с сетью и рилмом. Третья часть это DTO, с парсерами. Причина кроется в специфике iOS приложений, ведь это тонкие клиенты.</description>
    </item>
    
    <item>
      <title>Инверсия управления в iOS</title>
      <link>https://jonfir.github.io/posts/ioc-ios/</link>
      <pubDate>Tue, 24 Jul 2018 15:23:11 +0700</pubDate>
      
      <guid>https://jonfir.github.io/posts/ioc-ios/</guid>
      <description>В последнее время я все чаще слышу о DI. Им интересуются мои студенты в Geek University, его упоминают в чатах. Хотя паттерн далеко не молод, многие не совсем верно его понимают. Часто под DI подразумевают фреймворк, например, typhoon или swinject. В статье подробно разберем принципы реализации DI, а также принцип IoC. Если интересно, прошу под кат.
DI (внедрение зависимости, англ. Dependency injection) — процесс предоставления внешней зависимости программному компоненту. Является специфичной формой «IoC», когда она применяется к управлению зависимостями.</description>
    </item>
    
  </channel>
</rss>
